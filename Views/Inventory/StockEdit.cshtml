@model StoreFront2.ViewModels.ProductViewModel

@using StoreFront2.Data;

@{
    var access = new UserPermission();
    var usersetting = new UserSetting();
    var _storeFrontName = "Defaults";
    var _setting = new SystemSetting();
    if (Session["Site"] != null)
    {
        Layout = ((StoreFront2.Models.Site)Session["Site"]).LayoutPath;
        _storeFrontName = ((StoreFront2.Models.Site)Session["Site"]).StoreFrontName;
        _setting = ((StoreFront2.Models.Site)Session["Site"]).Setting;
        access = ((StoreFront2.Models.Site)Session["Site"]).SiteAuth;
        usersetting = ((StoreFront2.Models.Site)Session["Site"]).SiteUserSetting;
    }
}

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Stock Edit</title>
</head>
<div class="k-content wide">
    <div class="row">
        <div class="col-md-2">
            @Html.ActionLink("Back to List", "Stock", "Inventory")
        </div>
        <div class="col-md-10">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Product Edit</h4>
                    <hr />
                    <div class="col-md-2">
                        <img class="media-object" src="~/@Url.Content(Model.ImageRelativePath)" onerror="src='@Url.Content("~/Content/"+_storeFrontName+"/Images/default.png")'" style="width: 72px; height: 72px;">
                    </div>
                    <div class="col-md-10">
                        Categories
                        @(Html.Kendo().MultiSelect()
                          .Name("category")
                          .Placeholder("Select category ...")
                          .DataTextField("Name")
                          .DataValueField("Id")
                          .DataSource(source =>
                          {
                              source.Read(read =>
                              {
                                  read.Action("ToolbarTemplate_Categories", "Inventory");
                              });
                          })
                          .Events(e =>
                          {
                              e.DataBound("setSelectedValue");
                          })
                        )
                    </div>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.EmsProductId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EmsProductId, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EmsProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PickPackCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PickPackCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PickPackCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Upc, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Upc, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Upc, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ShortDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ShortDesc, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ShortDesc, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.LongDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LongDesc, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LongDesc, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Width, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Restricted, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Restricted)
                                @Html.ValidationMessageFor(model => model.Restricted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DefaultValue, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DefaultValue, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DefaultValue, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @{ if (_setting.DisplayProductPrices == 1)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.SellPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.SellPrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.SellPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.LowLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LowLevel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LowLevel, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.CreatedBy)
                    @Html.HiddenFor(model => model.DateCreated)
                    @Html.HiddenFor(model => model.UserId)
                    @Html.HiddenFor(model => model.UserName)
                    <div class="form-group">
                        @Html.LabelFor(model => model.ItemValue, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ItemValue, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ItemValue, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.MinQty, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MinQty, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MinQty, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.MaxQty, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MaxQty, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaxQty, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ImageRelativePath, htmlAttributes: new { @class = "control-label col-md-2" })
                        @*<div class="col-md-10">
                                @Html.EditorFor(model => model.ImageRelativePath, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ImageRelativePath, "", new { @class = "text-danger" })
                            </div>*@
                        <div class="col-md-10">
                            @(Html.Kendo().Upload()
                                    .Name("files")
                                    .HtmlAttributes(new { aria_label = "files" })
                                    .Async(a => a
                                                .Save("Chunk_Upload_Save", "Inventory")
                                                .Remove("Chunk_Upload_Remove", "Inventory")
                                                .AutoUpload(true)
                                                .ChunkSize(1100))
                            )
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input id="btnSave" type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
                        }

        </div>
    </div>
</div>

<script>
    function setSelectedValue() {
        $.ajax({
            datatype: "json",
            url: '@Url.Action("ToolbarTemplate_Categories_SetSelected", new { Id = Model.Id })',
            success: function (data) {
                $("#category").data("kendoMultiSelect").value(data);
            }
        })
    }

    $("#btnSave").click(function () {
        $.ajax({
            url: '@Url.Action("ToolbarTemplate_Categories_SaveSelected")',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            data: JSON.stringify({categories: $("#category").data("kendoMultiSelect").dataItems(), product: {Id: @Model.Id}})
        })
    })

</script>