@using StoreFront2.Models;
@using StoreFront2.Data;

@model StoreFront2.Models.IndexViewModel

@{
    var _storeFrontName = "Defaults";
    var _setting = new SystemSetting();
    var _site = new Site();
    if (Session["Site"] != null)
    {
        Layout = ((StoreFront2.Models.Site)Session["Site"]).LayoutPath;
        _storeFrontName = ((StoreFront2.Models.Site)Session["Site"]).StoreFrontName;
        _setting = ((StoreFront2.Models.Site)Session["Site"]).Setting;
        _site = (StoreFront2.Models.Site)Session["Site"];
    }
}

<style>
    .k-checkbox {
        height: 32px;
        width: 32px;
        background-color: white;
    }

    .k-textbox {
        width: 100%;
    }

    .k-grid {
        border-width: 0 0 0 0;
    }

    .k-grid-header {
        background-color: green;
        color: white;
        border-color: white;
    }

    .k-grid k-grid-content {
        border-color: white;
    }
</style>

<div class="container">
    <div class="col-md-12">

        <p class="text-success">@ViewBag.StatusMessage</p>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div>

            @using (Html.BeginForm("Index", "Manage", FormMethod.Post, new { onkeydown = "return event.keyCode!=13" }))
            {
                @Html.AntiForgeryToken()

                <div class="panel with-nav-tabs panel-default">
                    <div class="panel-heading">
                        <ul class="nav nav-tabs">
                            <li class="active">
                                <a href="#tab1default" data-toggle="tab">Bio</a>
                            </li>
                            @if (_setting.BudgetEnforce == 1)
                            {
                                <li><a href='#tabBudget' data-toggle='tab'>Budget</a></li>
                            }
                            @if (!_site.IsVendor)
                            {
                                @*<li><a href="#tab2default" data-toggle="tab">Alerts</a></li>*@
                                <li><a href="#tabAddressManager" data-toggle="tab">Address Manager</a></li>
                            }
                        </ul>
                    </div>
                    <div class="panel-body">
                        <div class="tab-content">
                            <div class="tab-pane fade in active" id="tab1default">
                                <div class="row">
                                    <div class="col-md-8">

                                    </div>
                                    <div class="form-group col-md-4">
                                        <div class="col-md-6">
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <div class="col-md-offset-2 col-md-10">
                                                    <input type="submit" value="Save" class="btn btn-success" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="k-card k-card-body">
                                    <div class="form-horizontal">
                                        <h4>Contact Information</h4>
                                        <hr />
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(model => model.Id)
                                        @Html.HiddenFor(model => model.UserName)


                                        <fieldset disabled)>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.UserName, "User Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    @Html.DisplayFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                                                    @*@Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })*@
                                                </div>
                                            </div>
                                        </fieldset>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Company, "Company", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                       
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Address1, "Address Line 1", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Address1, "Address Line 2", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.City, "City", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.State, "State", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Zip, "Zip", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Zip, "Phone", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <div class="k-card k-card-body">
                                    <div class="form-horizontal">
                                        <h4>Access Information</h4>
                                        <hr />
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(model => model.Id)

                                        <div class="form-group">
                                            @Html.LabelFor(m => m.OldPassword, new { @class = "col-md-2 control-label" })
                                            <div class="col-md-10">
                                                @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.NewPassword, new { @class = "col-md-2 control-label" })
                                            <div class="col-md-10">
                                                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
                                                <span class="field-validation-valid">
                                                    *Password Requirement Criteria: Password must contain 6 characters, at least 1 uppercase, 1 lowercase, 1 number, and 1 special character.
                                                </span>
                                                <span id="PasswordError" class="field-validation-valid text-danger" style="display:none">Password must be 6 character or longer</span>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
                                            <div class="col-md-10">
                                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                                                <span id="ConfirmPasswordError" class="field-validation-valid text-danger" style="display:none">Password Confirmation is not the same</span>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="row">
                                                <div id="ChangePasswordError" class="col-md-4 col-md-offset-2 field-validation-valid text-danger"></div>
                                            </div>
                                            <div class="col-md-4 col-md-offset-2">
                                                @*<button id="btnChangePassword" class="btn btn-success" onclick="onChangePasswordClick(event)">Change Password</button>*@
                                                <input id="btnChangePassword" value="Change Password" class="btn btn-success" onclick="onChangePasswordClick(event)" />
                                            </div>
                                        </div>

                                        @*<div>
                                                <dl class="dl-horizontal">
                                                    <dt>Password:</dt>
                                                    <dd>
                                                        [
                                                        @if (Model.HasPassword)
                                                        {
                                                            @Html.ActionLink("Change your password", "ChangePassword")
                                                        }
                                                        else
                                                        {
                                                            @Html.ActionLink("Create", "SetPassword")
                                                        }
                                                        ]
                                                    </dd>
                                                </dl>
                                            </div>*@

                                    </div>
                                </div>


                            </div>
                            <div class="tab-pane fade" id="tabBudget">
                                <div class="k-card k-card-body">
                                    <div class="form-horizontal">
                                        <h4>Budget Information</h4>
                                        <hr />

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BudgetLimit, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-8">
                                                @(Html.Kendo().NumericTextBox<decimal>()
                                                                .Name("BudgetLimit")
                                                                .Format("c").Spinners(false).Enable(false)
                                                )
                                                @Html.ValidationMessageFor(model => model.BudgetLimit, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BudgetCurrentTotal, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-8">
                                                @*@Html.TextBoxFor(model => model.BudgetCurrentTotal, "{0:c}", new { @class = "form-control", @readonly = "readonly" })*@
                                                @(Html.Kendo().NumericTextBox<decimal>()
                                                                .Name("BudgetCurrentTotal")
                                                                .Format("c").Decimals(0).Spinners(false).Enable(false)
                                                )
                                                @Html.ValidationMessageFor(model => model.BudgetCurrentTotal, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.OrdersCountingAgainstBudget, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-8">
                                                @(Html.Kendo().NumericTextBox<int>()
                                                                .Name("OrdersCountingAgainstBudget")
                                                                .Format("n0").Spinners(false).Enable(false)
                                                )
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BudgetCurrentAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-8">
                                                @(Html.Kendo().NumericTextBox<decimal>()
                                                                .Name("BudgetCurrentAvailable")
                                                                .Format("c").Spinners(false).Enable(false)
                                                )
                                                @Html.ValidationMessageFor(model => model.BudgetCurrentAvailable, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BudgetDaysUntilRefresh, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-4">
                                                @*@Html.TextBoxFor(model => model.BudgetDaysUntilRefresh, new { @class = "form-control", @style = "width:50px", @readonly = "readonly" })*@
                                                @(Html.Kendo().NumericTextBox<int>()
                                                                .Name("BudgetDaysUntilRefresh")
                                                                .Format("n0").Spinners(false).Enable(false)
                                                )
                                            </div>
                                        </div>

                                        @*<div class="row">
                                            <div class="col-md-2"></div>
                                            <div class="col-md-10">
                                                <input id="btnRefreshNowRequest" type="button" value="Request Budget Refresh" class="btn btn-success btn-sm" onclick="onClickRefreshNowRequest(this)" />
                                            </div>
                                        </div>*@

                                    </div>
                                </div>
                            </div>
                            @*<div class="tab-pane fade" id="tab2default">
                                <div class="row">
                                    <div class="col-md-8">

                                    </div>
                                    <div class="form-group col-md-4">
                                        <div class="col-md-6">
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <div class="col-md-offset-2 col-md-10">
                                                    <input type="submit" value="Save" class="btn btn-success" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="k-card k-card-body">
                                        <div class="form-horizontal">
                                            <h4>Alert Me When</h4>

                                            <div class="form-group">
                                                @Html.Label("Orders Are Placed", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    <div class="checkbox">
                                                        @Html.CheckBoxFor(model => model.AlertOrderReceived)
                                                        @Html.ValidationMessageFor(model => model.AlertOrderReceived, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.Label("Orders Are Shipped", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    <div class="checkbox">
                                                        @Html.CheckBoxFor(model => model.AlertOrderShipped)
                                                        @Html.ValidationMessageFor(model => model.AlertOrderShipped, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>*@
                            <div class="tab-pane fade" id="tabAddressManager">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body">
                                            <p style="font-size:x-large">User Addresses</p>
                                            <div class="k-card k-card-body">
                                                <div class="row">
                                                    <div class="col-md-2">
                                                        <h5 style="font-family:sans-serif">I WOULD LIKE TO</h5>
                                                    </div>
                                                    <div class="col-md-10">
                                                        @(Html.Kendo().DropDownList()
                                                .Name("myAction")
                                                .DataTextField("Text")
                                                .DataValueField("Value")
                                                .BindTo(new List<SelectListItem>()
                                                    {
                                                        new SelectListItem()
                                                        {
                                                            Text = "Choose",
                                                            Value = ""
                                                        },
                                                        new SelectListItem()
                                                        {
                                                            Text = "Add New Address",
                                                            Value = "actionAddUserAddress"
                                                        },
                                                        new SelectListItem()
                                                        {
                                                            Text = "Export Filtered",
                                                            Value = "actionExportToExcel"
                                                        },
                                                    })
                                                    .Value("")
                                                        )
                                                        <button class="btn btn-success btn-sm" onclick="onMyAction(event)">Execute Action</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <br />
                                            <div class="k-card k-card-body">

                                                <h5 class="k-card-title">Search Address By :</h5>
                                                <div class="row" style="padding-bottom: 5px">
                                                    <div class="col-sm-3">
                                                        Alias<br />
                                                        <input class="k-textbox" id="searchByAlias" style="width:100%;" />
                                                    </div>
                                                    <div class="col-sm-3">
                                                        Name<br />
                                                        <input class="k-textbox" id="searchByName" style="width:100%;" />
                                                    </div>
                                                    <div class="col-sm-3">
                                                        Email<br />
                                                        <input class="k-textbox" id="searchByEmail" style="width:100%;" />
                                                    </div>
                                                </div>
                                                <br />
                                                <div class="row" style="padding-bottom: 5px">
                                                    <div class="col-sm-3">
                                                        Address<br />
                                                        <input class="k-textbox" id="searchByAddress" style="width:100%;" />
                                                    </div>
                                                    <div class="col-sm-3">
                                                        City<br />
                                                        <input class="k-textbox" id="searchByCity" style="width:100%;" />
                                                    </div>
                                                    <div class="col-sm-3">
                                                        State<br />
                                                        <input class="k-textbox" id="searchByState" style="width:100%;" />
                                                    </div>
                                                    <div class="col-sm-3">
                                                        Zip<br />
                                                        <input class="k-textbox" id="searchByZip" style="width:100%;" />
                                                    </div>
                                                </div>
                                                <br />
                                                <div class="row">
                                                    <div class="col-md-3">
                                                        <input id="btnSearch" type="button" class="btn btn-success btn-sm" onclick="onSearch(event)" style="padding:5px" value="Search" />
                                                        <input id="btnReset" type="button" class="btn btn-sm" onclick="onReset(event)" style="padding:5px" value="Reset">
                                                    </div>
                                                </div>
                                            </div>
                                            <br />
                                            <div class="k-card k-card-body">

                                                @(Html.Kendo().Grid<StoreFront2.ViewModels.UserAddressViewModel>()
                                                  .Name("grid")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Bound(c => c.Id).Hidden();
                                                      columns.Bound(c => c.AddressAlias).Title("Alias").Width(50);
                                                      columns.Bound(c => c.Company).Width(50);
                                                      columns.Bound(c => c.FirstName).Title("First").Width(50);
                                                      columns.Bound(c => c.LastName).Title("Last").Width(50);
                                                      columns.Bound(c => c.Address1).Title("Address 1").Width(60);
                                                      columns.Bound(c => c.Address2).Title("Address 2").Width(40);
                                                      columns.Bound(c => c.City).Width(80);
                                                      columns.Bound(c => c.State).Title("State").Width(25);
                                                      columns.Bound(c => c.Zip).Width(50);
                                                      columns.Bound(c => c.Country).ClientTemplate("#=Country#").Width(50);
                                                      columns.Bound(c => c.Phone).Width(70);
                                                      columns.Bound(c => c.Email).Title("Email").Width(100);
                                                      columns.Bound(c => c.DefaultShipTo).Title("Default").EditorTemplateName("CheckBoxTemplate").ClientTemplate("<input type='checkbox' #=(DefaultShipTo??false) ? checked='checked' : '' # disabled='true' />").Width(40);
                                                      columns.Command(c =>
                                                      {
                                                          c.Edit().Text(" ").UpdateText(" ").CancelText(" "); //.Template("<button type=\"button\" class=\"k-button k-button-icon edit\"><span class=\"k-icon k-i-edit\"></span></button>");
                                                          c.Destroy().Text(" "); //.Template("<button type=\"button\" class=\"k-button k-button-icon k-grid-delete\"><span class=\"k-icon k-i-delete\"></span></button>");
                                                      }).Width(70);
                                                  })
                                                  .Selectable(selectable =>
                                                  {
                                                      selectable.Mode(GridSelectionMode.Single);
                                                      selectable.Type(GridSelectionType.Row);
                                                  })
                                                  .Pageable()
                                                  .Scrollable(scrolling => scrolling.Enabled(true))
                                                  .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .Model(c =>
                                                        {
                                                            c.Id(u => u.Id);
                                                            c.Field(p => p.DefaultShipTo).Editable(true);
                                                        })
                                                        .Read(read => read.Action("UserAddresses_Read", "Manage"))
                                                        .Create(create => create.Action("UserAddresses_Create", "Manage"))
                                                        .Update(update => update.Action("UserAddresses_Update", "Manage"))
                                                        .Destroy(destroy => destroy.Action("UserAddresses_Destroy", "Manage"))
                                                        .PageSize(50)
                                                        .Events(events =>
                                                        {
                                                            events.Error("error_handler");
                                                        })
                                                  )
                                                  .Editable(editable => editable
                                                        .Mode(GridEditMode.PopUp)
                                                        .Window(w => w.Title("Ship To Address"))
                                                        .TemplateName("UserAddressEditor")
                                                  )
                                                  .Events(events =>
                                                  {
                                                      events.Edit("onUserAddressEdit");
                                                      events.Save("onUserAddressSave");
                                                      events.DataBound("onUserAddressDataBound");
                                                      events.ExcelExport("customExcelExport");
                                                  })
                                                )

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


<script>
    function onChangePasswordClick() {
        var oldpass = $("#OldPassword");
        var newpass = $("#NewPassword");
        var confirmpass = $("#ConfirmPassword");
        var newpasserror = $("#PasswordError");
        var confirmpasserror = $("#ConfirmPasswordError");
        var changepassworderror = $("#ChangePasswordError");
        var errorElement = document.getElementById("ChangePasswordError");

        newpasserror.hide();
        confirmpasserror.hide();
        errorElement.innerHTML = "";

        if (newpass.val() != confirmpass.val()) {
            confirmpasserror.val('Password Confirmation is not the same');
            confirmpasserror.toggle();
        }
        else {
            $.post("/Manage/ChangePassword", { oldpassword: oldpass.val(), newpassword: newpass.val(), confirmpassword: confirmpass.val() }, function (data) {
                var errors = "";
                if (data.message == 'Error') {
                    var curErrorText = "";
                    for (var i = 0; i < data.errorlist.length; i++) {
                        curErrorText = errorElement.innerHTML;
                        errorElement.innerHTML = curErrorText + data.errorlist[i] + "<br />";
                    }
                } else {
                    errorElement.innerHTML = data.message;
                }
                //var wnd = $("#windowChangePassword").data("kendoWindow");
                //wnd.close();
            });
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = $("#grid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
            })
        }
    }

    function onUserAddressEdit(e) {
        var grid = e.sender;
        var currentDataItem = grid.dataItem(this.select());

        if (e.model.isNew()) {
            //set field
            e.model.Country = "US";
            var countryDropDownList = $("#Country").data("kendoDropDownList");
            countryDropDownList.value(e.model.Country);
        }

        //$('.k-grid-update').text("Save Address");
    }

    function onUserAddressSave(e) {
        //var grid = $("#grid").data("kendoGrid");
        e.sender.one("dataBound", function () {
            e.sender.dataSource.read();
            //var grid = $("#grid").data('kendoGrid');
            //grid.dataSource.read();
        })
    }

    function onUserAddressDataBound(e) {
        var grid = this;
        grid.element.off('dblclick');
        grid.element.on('dblclick', 'tbody tr[data-uid]', function (e) {
            grid.editRow($("#grid tr.k-state-selected"));
        });
        //e.sender.editRow($(e.target).closest('tr'));
    }

    function customExcelExport(e) {
        var sheet = e.workbook.sheets[0];
        for (var rowIndex = 1; rowIndex < sheet.rows.length; rowIndex++) {
            var row = sheet.rows[rowIndex];
        }

        if (e.sender._exporting === undefined) {
            e.sender._exporting = true;
        }
        if (e.sender._exporting) {
            e.preventDefault();

            setTimeout(function () {
                e.sender._exporting = false;
                e.sender.saveAsExcel();
            });
        } else {
            e.sender._exporting = true;
        }
    }

    function onMyAction(e) {
        var myAction = $("#myAction").val();

        if (myAction == "actionExportToExcel") {
            var grid = $('#grid').data('kendoGrid');
            grid.setOptions({
                excel: {
                    allPages: true
                }
            });
            grid.saveAsExcel();
            e.preventDefault();
        }

        if (myAction == "actionAddUserAddress") {
            e.preventDefault();
            var grid = $("#grid").data('kendoGrid');
            grid.addRow();
        }

        if (myAction.length == 0) {
            e.preventDefault();
        }

    }

    function onReset(e) {
        $('#searchByAlias').val('');
        $('#searchByName').val('');
        $('#searchByAddress').val('');
        $('#searchByCity').val('');
        $('#searchByState').val('');
        $('#searchByZip').val('');
        $('#searchByEmail').val('');

        onSearch(e);
    }

    function onSearch(e) {
        var grid = $('#grid').data('kendoGrid');

        // blank filter and push additional parameters
        var filter = { logic: 'and', filters: [] };
        var filterAlias = { logic: 'or', filters: [] };
        var filterName = { logic: 'or', filters: [] };
        var filterAddress = { logic: 'or', filters: [] };
        var filterCity = { logic: 'or', filters: [] };
        var filterState = { logic: 'or', filters: [] };
        var filterZip = { logic: 'or', filters: [] };
        var filterEmail = { logic: 'or', filters: [] };

        var valueByAlias = $('#searchByAlias').val();
        var valueByName = $('#searchByName').val();
        var valueByAddress = $('#searchByAddress').val();
        var valueByCity = $('#searchByCity').val();
        var valueByState = $('#searchByState').val();
        var valueByZip = $('#searchByZip').val();
        var valueByEmail = $('#searchByEmail').val();

        if (valueByAlias.length > 0) {
            filterAlias.filters.push({
                field: 'AddressAlias',
                operator: 'contains',
                value: valueByAlias
            })
            filter.filters.push(filterAlias);
        }

        if (valueByName.length > 0) {
            filterName.filters.push({
                field: 'Company',
                operator: 'contains',
                value: valueByName
            })
            filterName.filters.push({
                field: 'FirstName',
                operator: 'contains',
                value: valueByName
            })
            filterName.filters.push({
                field: 'LastName',
                operator: 'contains',
                value: valueByName
            })
            filter.filters.push(filterName);
        }

        if (valueByAddress.length > 0) {
            filterAddress.filters.push({
                field: "Address1",
                operator: "contains",
                value: valueByAddress
            });
            filterAddress.filters.push({
                field: "Address2",
                operator: "contains",
                value: valueByAddress
            });
            filterAddress.filters.push({
                field: "Country",
                operator: "eq",
                value: valueByAddress
            });
            filter.filters.push(filterAddress);
        }

        if (valueByCity.length > 0) {
            filterCity.filters.push({
                field: "City",
                operator: "contains",
                value: valueByCity
            });
            filter.filters.push(filterCity);
        }

        if (valueByState.length > 0) {
            filterState.filters.push({
                field: "State",
                operator: "contains",
                value: valueByState
            });
            filter.filters.push(filterState);
        }

        if (valueByZip.length > 0) {
            filterZip.filters.push({
                field: "Zip",
                operator: "contains",
                value: valueByZip
            });
            filter.filters.push(filterZip);
        }

        if (valueByEmail.length > 0) {
            filterEmail.filters.push({
                field: 'Email',
                operator: 'contains',
                value: valueByEmail
            })
            filter.filters.push(filterEmail);
        }


        grid.dataSource.filter(filter);

    }

    function onClickRefreshNowRequest(e) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("UserBudgetRefreshNowRequest")',
            data: JSON.stringify({
                Id: '@Model.Id',
                SfId: @Model.SfId,
                FirstName: '@Model.FirstName',
                LastName: '@Model.LastName',
                BudgetLimit: @Model.BudgetLimit,
                BudgetCurrentTotal: @Model.BudgetCurrentTotal,
                OrdersCountingAgainstBudget: @Model.OrdersCountingAgainstBudget,
                BudgetCurrentAvailable: @Model.BudgetCurrentAvailable,
                BudgetDaysUntilRefresh: @Model.BudgetDaysUntilRefresh }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.message == "Success") {
                    alert("Request for Budget Refresh was Sent");
                }
                if (data.message == "Error") {
                    alert("Error : " + data.errordetail);
                }
            }
        })
    }

</script>
